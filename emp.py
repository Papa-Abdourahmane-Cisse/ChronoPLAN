import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import time
import pygame
import sqlite3
import json
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Initialiser le mixer de pygame
pygame.mixer.init()

# Configuration de la page
st.set_page_config(page_title="Gestionnaire d‚ÄôEmploi du Temps et d‚ÄôActivit√©s", layout="wide", page_icon="üìä")

# Ajouter des styles CSS personnalis√©s
st.markdown(
    """
    <style>
    /* Style pour le menu */
    .menu {
        background-color: #007BFF; /* Couleur bleu */
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-family: Arial, sans-serif;
    }

    .menu ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .menu li {
        margin: 10px 0;
    }

    .menu a {
        text-decoration: none;
        color: #FFFFFF; /* Couleur blanche pour le texte */
        font-weight: bold;
        transition: color 0.3s ease;
    }

    .menu a:hover {
        color: #FFD700; /* Couleur dor√©e pour le hover */
    }

    /* Style pour les sections */
    .section {
        border: 2px solid #007BFF; /* Couleur bleu */
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
        background-color: #ffffff;
    }

    .section h2 {
        color: #007BFF; /* Couleur bleu */
    }

    /* Forcer l'affichage des styles CSS */
    .stApp {
        background-color: #f0f8ff; /* Couleur de fond bleu clair */
    }

    .stButton>button {
        background-color: #007BFF; /* Couleur bleu pour les boutons */
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        width: 100%; /* Largeur compl√®te pour les boutons */
        margin-bottom: 10px; /* Espacement entre les boutons */
    }

    .stButton>button:hover {
        background-color: #0056b3; /* Couleur bleu plus fonc√© pour le hover des boutons */
    }

    .stForm {
        background-color: #ffffff; /* Couleur de fond blanc pour les formulaires */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .stForm input, .stForm select, .stForm textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .stForm button {
        width: 100%;
        padding: 15px;
        font-size: 18px;
    }

    /* Style pour les √©critures en couleur marron */
    .brown-text {
        color: #8B4513; /* Couleur marron */
    }

    /* Style pour les titres en couleur bleu */
    .blue-title {
        color: #007BFF; /* Couleur bleu */
    }

    /* Style pour l'encadrement avec fond gris */
    .gray-background {
        background-color: #f0f0f0; /* Couleur gris clair */
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    /* Style pour la page d'accueil */
    .home-section {
        background: linear-gradient(135deg, #ff9a9e, #fad0c4);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 3px 3px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }
    .home-section:hover {
        transform: scale(1.02);
        box-shadow: 4px 4px 15px rgba(0, 0, 0, 0.15);
    }
    .blue-title {
        color: #ffffff;
        font-size: 26px;
        font-weight: bold;
        margin-bottom: 12px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    .brown-text {
        color: #ffffff;
        font-size: 16px;
        line-height: 1.6;
        margin-bottom: 15px;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
    }
    .cta-button {
        background-color: #ff6b6b;
        color: white;
        padding: 12px 20px;
        font-size: 16px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
    }
    .cta-button:hover {
        background-color: #e63946;
        transform: scale(1.05);
    }
    .cta-icon {
        display: inline-block;
        transition: transform 0.3s ease-in-out;
    }
    .cta-button:hover .cta-icon {
        transform: translateX(5px);
    }

    /* Style pour le cercle d√©coratif */
    .circle {
        width: 150px;
        height: 150px;
        background-color: #ff9a9e;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 20px auto;
        position: relative;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .circle::before {
        content: 'üå∏';
        font-size: 80px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .emoji {
        font-size: 30px;
        position: absolute;
    }
    .emoji-1 {
        top: -10px;
        left: -10px;
    }
    .emoji-2 {
        top: -10px;
        right: -10px;
    }
    .emoji-3 {
        bottom: -10px;
        left: -10px;
    }
    .emoji-4 {
        bottom: -10px;
        right: -10px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Charger les donn√©es existantes
@st.cache_data
def load_data():
    try:
        data = pd.read_csv("emploi_du_temps.csv")
        data["Date"] = pd.to_datetime(data["Date"], errors="coerce")
        return data
    except FileNotFoundError:
        return pd.DataFrame(columns=["Date", "Mati√®re", "Dur√©e", "Priorit√©"])

# Initialiser emploi_du_temps
emploi_du_temps = load_data()

# Fonction pour enregistrer les donn√©es au format CSV
def save_to_csv(data, file_name="emploi_du_temps.csv"):
    data.to_csv(file_name, index=False)
    st.success(f"üå∏ Les donn√©es ont √©t√© enregistr√©es dans {file_name} üå∏")

# Fonction pour r√©initialiser les donn√©es
def reset_data():
    save_to_csv(pd.DataFrame(columns=["Date", "Mati√®re", "Dur√©e", "Priorit√©"]))
    st.success("üå∏ Toutes les donn√©es ont √©t√© r√©initialis√©es‚ÄØ! üå∏")

# Fonction pour envoyer des notifications (simul√© ici par un message Streamlit)
def send_notification(message):
    st.success(message)

# Fonction pour g√©n√©rer des rapports hebdomadaires/mensuels
def generate_report(emploi_du_temps, period="weekly"):
    now = datetime.now()
    if period == "hebdomadaire":
        start_date = now - timedelta(days=now.weekday() + 7)
    elif period == "mensuel":
        start_date = now.replace(day=1)
    else:
        st.error("P√©riode invalide. Veuillez s√©lectionner 'hebdomadaire' ou 'mensuel'.")
        return pd.DataFrame()  # Retourne un DataFrame vide en cas d'erreur

    filtered_data = emploi_du_temps[emploi_du_temps["Date"] >= start_date]
    report = filtered_data.groupby("Mati√®re")["Dur√©e"].sum().reset_index()
    return report

# Fonction pour exporter les donn√©es en Excel
def export_to_excel(data, file_name="emploi_du_temps.xlsx"):
    data.to_excel(file_name, index=False)
    st.success(f"üå∏ Les donn√©es ont √©t√© export√©es dans {file_name} üå∏")

# Fonction pour √©valuer l'emploi du temps
def evaluate_time_management():
    st.subheader("üìù √âvaluation de l'Emploi du Temps üå∏")

    questions = {
        "Avez-vous respect√© toutes les activit√©s pr√©vues pour aujourd'hui ?": {"Oui": 2, "Partiellement": 1, "Non": 0},
        "Avez-vous termin√© toutes les t√¢ches importantes ?": {"Oui": 2, "Partiellement": 1, "Non": 0},
        "Avez-vous √©vit√© les distractions pendant vos activit√©s ?": {"Oui": 2, "Partiellement": 1, "Non": 0},
        "Avez-vous pris des pauses r√©guli√®res ?": {"Oui": 2, "Partiellement": 1, "Non": 0},
        "Avez-vous respect√© les dur√©es allou√©es pour chaque activit√© ?": {"Oui": 2, "Partiellement": 1, "Non": 0},
    }

    total_score = 0
    max_score = len(questions) * 2

    # Initialiser les r√©ponses dans st.session_state
    if "responses" not in st.session_state:
        st.session_state.responses = {}

    for i, (question, options) in enumerate(questions.items()):
        st.write(question)
        key = f"q_{i}"  # Cl√© unique bas√©e sur l'indice de la question
        response = st.radio(question, list(options.keys()), key=key)
        st.session_state.responses[key] = response
        total_score += options[response]

    st.subheader("R√©sultats de l'√âvaluation üå∏")
    st.write(f"Votre score est : {total_score}/{max_score}")

    if total_score == max_score:
        st.success("üéâ Parfait ! Vous avez parfaitement g√©r√© votre emploi du temps aujourd'hui.")
        st.balloons()
    elif total_score >= max_score / 2:
        st.info("üëç Vous avez bien g√©r√© votre temps, mais vous pouvez encore vous am√©liorer.")
    else:
        st.warning("‚ö†Ô∏è Essayez de mieux planifier et suivre votre emploi du temps.")

    # Enregistrer le score quotidien
    if "daily_scores" not in st.session_state:
        st.session_state.daily_scores = pd.DataFrame(columns=["Date", "Score"])
    st.session_state.daily_scores = pd.concat([st.session_state.daily_scores, pd.DataFrame({"Date": [datetime.now().date()], "Score": [total_score]})], ignore_index=True)

    # Graphique pour visualiser la performance
    st.subheader("üìà Graphique de performance")
    if not st.session_state.daily_scores.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(st.session_state.daily_scores["Date"], st.session_state.daily_scores["Score"], marker="o", linestyle="-")
        ax.set_xlabel("Date")
        ax.set_ylabel("Score")
        ax.set_title("Scores quotidiens de l'emploi du temps")
        ax.grid(True)
        st.pyplot(fig)

# Fonction pour ajouter des cours et des expressions math√©matiques
def add_course():
    st.subheader("Ajouter un cours üìö")
    matiere = st.selectbox("S√©lectionnez la mati√®re", emploi_du_temps["Mati√®re"].unique(), key="add_course_matiere")
    cours = st.text_area("Contenu du cours", key="add_course_contenu")
    expression = st.text_input("Expression math√©matique (utilisez LaTeX)", key="add_course_expression")
    color = st.color_picker("Choisir la couleur du texte", "#000000", key="add_course_color")
    underline = st.checkbox("Souligner le texte", key="add_course_underline")

    if st.button("Ajouter le cours", key="add_course_button"):
        if matiere and cours:
            # Sauvegarder le cours dans un fichier JSON
            course_data = {
                "Mati√®re": matiere,
                "Contenu": cours,
                "Expression": expression,
                "Couleur": color,
                "Soulign√©": underline
            }
            save_course(course_data)
            st.success("Cours ajout√© avec succ√®s !")
            if expression:
                st.latex(expression)

# Fonction pour sauvegarder les cours dans un fichier JSON
def save_course(course_data):
    try:
        with open("cours.json", "r") as file:
            courses = json.load(file)
    except FileNotFoundError:
        courses = []

    courses.append(course_data)

    with open("cours.json", "w") as file:
        json.dump(courses, file, indent=4)

# Fonction pour charger les cours depuis un fichier JSON
def load_courses():
    try:
        with open("cours.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un cours
def delete_course(index):
    courses = load_courses()
    if 0 <= index < len(courses):
        del courses[index]
        with open("cours.json", "w") as file:
            json.dump(courses, file, indent=4)
        st.success("Cours supprim√© avec succ√®s !")
    else:
        st.error("Index de cours invalide.")

# Fonction pour afficher les cours sauvegard√©s
def view_courses():
    st.subheader("Cours sauvegard√©s üìö")
    courses = load_courses()
    for index, course in enumerate(courses):
        st.write(f"**Mati√®re:** {course['Mati√®re']}")
        st.write(f"**Contenu:** {course['Contenu']}")
        if course["Expression"]:
            st.latex(course["Expression"])
        st.markdown(f"<p style='color:{course['Couleur']}; text-decoration:{'underline' if course['Soulign√©'] else 'none'}'>{course['Contenu']}</p>", unsafe_allow_html=True)
        if st.button(f"Supprimer le cours {index + 1}", key=f"delete_course_{index}"):
            delete_course(index)
            st.rerun()
        st.write("---")

# Fonction pour ajouter une t√¢che √† la To-Do List
def add_task():
    st.subheader("Ajouter une t√¢che üìã")
    with st.form(key="add_task_form"):
        task = st.text_input("Nom de la t√¢che", key="add_task_name")
        date = st.date_input("Date d'√©ch√©ance", key="add_task_date")
        time = st.time_input("Heure d'√©ch√©ance", key="add_task_time")
        priority = st.selectbox("Priorit√©", ["Faible", "Moyenne", "√âlev√©e"], key="add_task_priority")
        reminder_email = st.checkbox("Envoyer un rappel par email", key="add_task_reminder")
        submitted = st.form_submit_button("Ajouter la t√¢che")

        if submitted:
            if task and date and time:
                task_data = {
                    "Nom": task,
                    "Date": date.strftime("%Y-%m-%d"),
                    "Heure": time.strftime("%H:%M:%S"),
                    "Priorit√©": priority,
                    "Rappel": reminder_email
                }
                save_task(task_data)
                st.success("T√¢che ajout√©e avec succ√®s !")
                if reminder_email:
                    send_email(
                        subject="Rappel de t√¢che",
                        body=f"Vous avez une t√¢che '{task}' √† compl√©ter avant le {date} √† {time}.",
                        to_email="your_email@gmail.com",  # Remplacez par votre email
                        is_reminder=True
                    )

# Fonction pour sauvegarder les t√¢ches dans un fichier JSON
def save_task(task_data):
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

    tasks.append(task_data)

    with open("tasks.json", "w") as file:
        json.dump(tasks, file, indent=4)

# Fonction pour charger les t√¢ches depuis un fichier JSON
def load_tasks():
    try:
        with open("tasks.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une t√¢che
def delete_task(index):
    tasks = load_tasks()
    if 0 <= index < len(tasks):
        del tasks[index]
        with open("tasks.json", "w") as file:
            json.dump(tasks, file, indent=4)
        st.success("T√¢che supprim√©e avec succ√®s !")
    else:
        st.error("Index de t√¢che invalide.")

# Fonction pour afficher les t√¢ches sauvegard√©es
def view_tasks():
    st.subheader("T√¢ches sauvegard√©es üìã")
    tasks = load_tasks()
    for index, task in enumerate(tasks):
        st.write(f"**Nom:** {task['Nom']}")
        st.write(f"**Date d'√©ch√©ance:** {task['Date']} {task['Heure']}")
        st.write(f"**Priorit√©:** {task['Priorit√©']}")
        if st.button(f"Supprimer la t√¢che {index + 1}", key=f"delete_task_{index}"):
            delete_task(index)
            st.rerun()
        st.write("---")

# Fonction pour ajouter un projet
def add_project():
    st.subheader("Ajouter un projet üìö")
    project_name = st.text_input("Nom du projet", key="add_project_name")
    steps = st.text_area("√âtapes du projet (une par ligne)", key="add_project_steps")

    if st.button("Ajouter le projet", key="add_project_button"):
        if project_name and steps:
            project_data = {
                "Nom": project_name,
                "√âtapes": steps.split("\n")
            }
            save_project(project_data)
            st.success("Projet ajout√© avec succ√®s !")

# Fonction pour sauvegarder les projets dans un fichier JSON
def save_project(project_data):
    try:
        with open("projects.json", "r") as file:
            projects = json.load(file)
    except FileNotFoundError:
        projects = []

    projects.append(project_data)

    with open("projects.json", "w") as file:
        json.dump(projects, file, indent=4)

# Fonction pour charger les projets depuis un fichier JSON
def load_projects():
    try:
        with open("projects.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un projet
def delete_project(index):
    projects = load_projects()
    if 0 <= index < len(projects):
        del projects[index]
        with open("projects.json", "w") as file:
            json.dump(projects, file, indent=4)
        st.success("Projet supprim√© avec succ√®s !")
    else:
        st.error("Index de projet invalide.")

# Fonction pour afficher les projets sauvegard√©s
def view_projects():
    st.subheader("Projets sauvegard√©s üìö")
    projects = load_projects()
    for index, project in enumerate(projects):
        st.write(f"**Nom:** {project['Nom']}")
        st.write("**√âtapes:**")
        for step in project["√âtapes"]:
            st.write(f"- {step}")
        if st.button(f"Supprimer le projet {index + 1}", key=f"delete_project_{index}"):
            delete_project(index)
            st.rerun()
        st.write("---")

# Fonction pour changer le th√®me
def change_theme(theme):
    if theme == "Sombre":
        st.markdown(
            """
            <style>
            .main {
                background-color: #1E1E1E;
                color: #FFFFFF;
            }
            </style>
            """,
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            """
            <style>
            .main {
                background-color: #FFFFFF;
                color: #000000;
            }
            </style>
            """,
            unsafe_allow_html=True
        )

# Fonction pour sauvegarder les pr√©f√©rences utilisateur
def save_preferences(theme):
    preferences = {
       "theme": theme
    }
    with open("preferences.json", "w") as file:
       json.dump(preferences, file, indent=4)

# Fonction pour charger les pr√©f√©rences utilisateur
def load_preferences():
    try:
        with open("preferences.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"theme": "Clair"}

# Fonction pour d√©finir des objectifs personnels
def set_goals():
    st.subheader("D√©finir des objectifs personnels üéØ")
    goal_name = st.text_input("Nom de l'objectif", key="set_goals_name")
    goal_description = st.text_area("Description de l'objectif", key="set_goals_description")
    goal_target = st.number_input("Cible (en heures)", min_value=0, step=1, key="set_goals_target")
    goal_deadline = st.date_input("Date limite", key="set_goals_deadline")

    if st.button("Ajouter l'objectif", key="set_goals_button"):
        if goal_name and goal_description and goal_target and goal_deadline:
            goal_data = {
                "Nom": goal_name,
                "Description": goal_description,
                "Cible": goal_target,
                "Date limite": goal_deadline.strftime("%Y-%m-%d")
            }
            save_goal(goal_data)
            st.success("Objectif ajout√© avec succ√®s !")

# Fonction pour sauvegarder les objectifs dans un fichier JSON
def save_goal(goal_data):
    try:
        with open("goals.json", "r") as file:
            goals = json.load(file)
    except FileNotFoundError:
        goals = []

    goals.append(goal_data)

    with open("goals.json", "w") as file:
        json.dump(goals, file, indent=4)

# Fonction pour charger les objectifs depuis un fichier JSON
def load_goals():
    try:
        with open("goals.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour afficher les objectifs sauvegard√©s
def view_goals():
    st.subheader("Objectifs sauvegard√©s üéØ")
    goals = load_goals()
    for index, goal in enumerate(goals):
        st.write(f"**Nom:** {goal['Nom']}")
        st.write(f"**Description:** {goal['Description']}")
        st.write(f"**Cible:** {goal['Cible']} heures")
        st.write(f"**Date limite:** {goal['Date limite']}")
        if st.button(f"Supprimer l'objectif {index + 1}", key=f"delete_goal_{index}"):
            delete_goal(index)
            st.rerun()
        st.write("---")

# Fonction pour supprimer un objectif
def delete_goal(index):
    goals = load_goals()
    if 0 <= index < len(goals):
        del goals[index]
        with open("goals.json", "w") as file:
            json.dump(goals, file, indent=4)
        st.success("Objectif supprim√© avec succ√®s !")
    else:
        st.error("Index d'objectif invalide.")

# Fonction pour g√©n√©rer un rapport de progression
def generate_progress_report(emploi_du_temps, goals):
    now = datetime.now()
    report = []

    for goal in goals:
        goal_deadline = datetime.strptime(goal["Date limite"], "%Y-%m-%d")
        if now.date() <= goal_deadline.date():
            filtered_data = emploi_du_temps[emploi_du_temps["Date"] <= goal_deadline]
            total_hours = filtered_data["Dur√©e"].sum()
            progress = (total_hours / goal["Cible"]) * 100
            report.append({
                "Nom": goal["Nom"],
                "Description": goal["Description"],
                "Cible": goal["Cible"],
                "Heures r√©elles": total_hours,
                "Progression": progress
            })

    return pd.DataFrame(report)

# Fonction pour ajouter des notes et des coefficients
def manage_grades_and_coefficients():
    st.subheader("Gestion des Notes et Coefficients üìà")

    # Ajouter une note
    st.subheader("Ajouter une note üìà")
    matiere = st.selectbox("S√©lectionnez la mati√®re", emploi_du_temps["Mati√®re"].unique(), key="add_grades_matiere")
    grade = st.number_input("Note", min_value=0.0, max_value=20.0, step=0.1, key="add_grades_grade")
    date = st.date_input("Date de la note", key="add_grades_date")

    if st.button("Ajouter la note", key="add_grades_button"):
        if matiere and grade and date:
            grade_data = {
                "Mati√®re": matiere,
                "Note": grade,
                "Date": date.strftime("%Y-%m-%d")
            }
            save_grade(grade_data)
            st.success("Note ajout√©e avec succ√®s !")

    # D√©finir un coefficient
    st.subheader("D√©finir un coefficient üìö")
    matiere_coef = st.selectbox("S√©lectionnez la mati√®re", emploi_du_temps["Mati√®re"].unique(), key="set_coefficients_matiere")
    coefficient = st.number_input("Coefficient", min_value=0.0, step=0.1, key="set_coefficients_coefficient")

    if st.button("Ajouter le coefficient", key="set_coefficients_button"):
        if matiere_coef and coefficient:
            coefficient_data = {
                "Mati√®re": matiere_coef,
                "Coefficient": coefficient
            }
            save_coefficient(coefficient_data)
            st.success("Coefficient ajout√© avec succ√®s !")

    # Afficher les notes et coefficients sauvegard√©s
    st.subheader("Notes et Coefficients sauvegard√©s üìö")
    grades = load_grades()
    coefficients = load_coefficients()

    for index, grade in enumerate(grades):
        st.write(f"**Mati√®re:** {grade['Mati√®re']}")
        st.write(f"**Note:** {grade['Note']}")
        st.write(f"**Date:** {grade['Date']}")
        if st.button(f"Supprimer la note {index + 1}", key=f"delete_grade_{index}"):
            delete_grade(index)
            st.rerun()
        st.write("---")

    for index, coefficient in enumerate(coefficients):
        st.write(f"**Mati√®re:** {coefficient['Mati√®re']}")
        st.write(f"**Coefficient:** {coefficient['Coefficient']}")
        if st.button(f"Supprimer le coefficient {index + 1}", key=f"delete_coefficient_{index}"):
            delete_coefficient(index)
            st.rerun()
        st.write("---")

    # Calculer la moyenne pond√©r√©e
    calculate_weighted_average()

# Fonction pour sauvegarder les notes dans un fichier JSON
def save_grade(grade_data):
    try:
        with open("grades.json", "r") as file:
            grades = json.load(file)
    except FileNotFoundError:
        grades = []

    grades.append(grade_data)

    with open("grades.json", "w") as file:
        json.dump(grades, file, indent=4)

# Fonction pour charger les notes depuis un fichier JSON
def load_grades():
    try:
        with open("grades.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une note
def delete_grade(index):
    grades = load_grades()
    if 0 <= index < len(grades):
        del grades[index]
        with open("grades.json", "w") as file:
            json.dump(grades, file, indent=4)
        st.success("Note supprim√©e avec succ√®s !")
    else:
        st.error("Index de note invalide.")

# Fonction pour sauvegarder les coefficients dans un fichier JSON
def save_coefficient(coefficient_data):
    try:
        with open("coefficients.json", "r") as file:
            coefficients = json.load(file)
    except FileNotFoundError:
        coefficients = []

    coefficients.append(coefficient_data)

    with open("coefficients.json", "w") as file:
        json.dump(coefficients, file, indent=4)

# Fonction pour charger les coefficients depuis un fichier JSON
def load_coefficients():
    try:
        with open("coefficients.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un coefficient
def delete_coefficient(index):
    coefficients = load_coefficients()
    if 0 <= index < len(coefficients):
        del coefficients[index]
        with open("coefficients.json", "w") as file:
            json.dump(coefficients, file, indent=4)
        st.success("Coefficient supprim√© avec succ√®s !")
    else:
        st.error("Index de coefficient invalide.")

# Fonction pour calculer la moyenne totale des notes avec coefficients
def calculate_weighted_average():
    st.subheader("Calculer la moyenne totale des notes avec coefficients üìà")
    grades = load_grades()
    coefficients = load_coefficients()

    if not grades or not coefficients:
        st.warning("Veuillez ajouter des notes et des coefficients avant de calculer la moyenne.")
        return

    total_weighted_sum = 0
    total_weight = 0

    for grade in grades:
        matiere = grade["Mati√®re"]
        note = grade["Note"]
        coefficient = next((c["Coefficient"] for c in coefficients if c["Mati√®re"] == matiere), 1)
        total_weighted_sum += note * coefficient
        total_weight += coefficient

    if total_weight > 0:
        weighted_average = total_weighted_sum / total_weight
        st.success(f"La moyenne totale pond√©r√©e est : {weighted_average:.2f}")
    else:
        st.warning("Les coefficients totaux sont √©gaux √† z√©ro. Veuillez v√©rifier les coefficients.")

# Fonction pour d√©marrer le minuteur Pomodoro
def start_pomodoro_timer(work_duration, break_duration):
    work_duration_seconds = work_duration * 60
    break_duration_seconds = break_duration * 60

    st.session_state.pomodoro_state = "work"
    st.session_state.duration_seconds = work_duration_seconds
    st.session_state.elapsed_time = 0

    while st.session_state.pomodoro_state == "work" and st.session_state.elapsed_time < st.session_state.duration_seconds:
        time.sleep(1)
        st.session_state.elapsed_time += 1
        remaining_time = st.session_state.duration_seconds - st.session_state.elapsed_time
        st.write(f"Temps restant : {remaining_time // 60} minutes {remaining_time % 60} secondes")

    st.success("Temps de travail √©coul√© ! Prenez une pause.")
    pygame.mixer.music.load("notification_sound.mp3")  # Assurez-vous d'avoir un fichier sonore
    pygame.mixer.music.play()

    st.session_state.pomodoro_state = "break"
    st.session_state.duration_seconds = break_duration_seconds
    st.session_state.elapsed_time = 0

    while st.session_state.pomodoro_state == "break" and st.session_state.elapsed_time < st.session_state.duration_seconds:
        time.sleep(1)
        st.session_state.elapsed_time += 1
        remaining_time = st.session_state.duration_seconds - st.session_state.elapsed_time
        st.write(f"Temps restant : {remaining_time // 60} minutes {remaining_time % 60} secondes")

    st.success("Pause termin√©e ! Reprenez le travail.")
    pygame.mixer.music.load("notification_sound.mp3")
    pygame.mixer.music.play()

# Fonction pour mettre en pause le minuteur Pomodoro
def pause_pomodoro_timer():
    if st.session_state.pomodoro_state in ["work", "break"]:
        st.session_state.pomodoro_state = "paused"
        remaining_time = st.session_state.duration_seconds - st.session_state.elapsed_time
        st.write(f"Temps restant : {remaining_time // 60} minutes {remaining_time % 60} secondes")

# Fonction pour arr√™ter le son
def stop_sound():
    pygame.mixer.music.stop()

# Fonction pour enregistrer le temps pass√© sur une activit√©
def log_time_spent(activity, start_time, end_time):
    # Convertir les heures en objets datetime
    start_time = datetime.strptime(start_time, "%H:%M:%S")
    end_time = datetime.strptime(end_time, "%H:%M:%S")

    # Calculer la dur√©e
    duration = end_time - start_time

    # Enregistrer dans un fichier JSON
    time_data = {
        "Activity": activity,
        "Start Time": start_time.strftime("%H:%M:%S"),
        "End Time": end_time.strftime("%H:%M:%S"),
        "Duration": str(duration)
    }

    try:
        with open("time_log.json", "r") as file:
            time_logs = json.load(file)
    except FileNotFoundError:
        time_logs = []

    time_logs.append(time_data)

    with open("time_log.json", "w") as file:
        json.dump(time_logs, file, indent=4)

    st.success("Temps pass√© enregistr√© avec succ√®s !")

# Fonction pour afficher le temps pass√© sur les activit√©s
def view_time_log():
    st.subheader("Temps pass√© sur les activit√©s üìà")
    try:
        with open("time_log.json", "r") as file:
            time_logs = json.load(file)
    except FileNotFoundError:
        time_logs = []

    if time_logs:
        df = pd.DataFrame(time_logs)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("Aucune activit√© enregistr√©e pour le moment.")

# Fonction pour convertir les heures en minutes
def convert_hours_to_minutes(hours):
    return hours * 60

# Fonction pour supprimer les activit√©s d'une date sp√©cifique
def delete_activities_by_date(date):
    global emploi_du_temps
    emploi_du_temps = emploi_du_temps[emploi_du_temps["Date"] != date]
    save_to_csv(emploi_du_temps)
    st.success(f"Les activit√©s du {date} ont √©t√© supprim√©es avec succ√®s !")

# Fonction pour g√©n√©rer un diagramme circulaire de l'emploi du temps
def generate_pie_chart(selected_date):
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect("emploi_du_temps.db")
    cursor = conn.cursor()

    # Chargement des activit√©s depuis la base
    df = pd.read_sql_query("SELECT * FROM activites", conn)
    conn.close()

    if not df.empty:
        df["date"] = pd.to_datetime(df["date"], errors="coerce")
        df = df.dropna(subset=["date"])
        df["date"] = df["date"].dt.strftime("%Y-%m-%d")  # Formatage des dates

        filtered_data = df[df["date"] == selected_date.strftime("%Y-%m-%d")]
        if not filtered_data.empty:
            matiere_counts = filtered_data["nom"].value_counts()
            fig, ax = plt.subplots()
            ax.pie(matiere_counts, labels=matiere_counts.index, autopct='%1.1f%%', startangle=90)
            ax.axis('equal')  # Assure que le diagramme est un cercle.
            st.pyplot(fig)
        else:
            st.info(f"Aucune donn√©e disponible pour la date {selected_date}.")
    else:
        st.info("Aucune donn√©e disponible pour g√©n√©rer le diagramme circulaire.")

# Fonction pour ajouter un examen
def add_exam():
    st.subheader("Ajouter un examen üìö")
    exam_name = st.text_input("Nom de l'examen", key="add_exam_name")
    exam_date = st.date_input("Date de l'examen", key="add_exam_date")
    exam_time = st.time_input("Heure de l'examen", key="add_exam_time")

    if st.button("Ajouter l'examen", key="add_examen_button"):
        if exam_name and exam_date and exam_time:
            exam_data = {
                "Nom": exam_name,
                "Date": exam_date.strftime("%Y-%m-%d"),
                "Heure": exam_time.strftime("%H:%M:%S")
            }
            save_exam(exam_data)
            st.success("Examen ajout√© avec succ√®s !")

# Fonction pour sauvegarder les examens dans un fichier JSON
def save_exam(exam_data):
    try:
        with open("exams.json", "r") as file:
            exams = json.load(file)
    except FileNotFoundError:
        exams = []

    exams.append(exam_data)

    with open("exams.json", "w") as file:
        json.dump(exams, file, indent=4)

# Fonction pour charger les examens depuis un fichier JSON
def load_exams():
    try:
        with open("exams.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour afficher les examens sauvegard√©s
def view_exams():
    st.subheader("Examens sauvegard√©s üìö")
    exams = load_exams()
    for index, exam in enumerate(exams):
        st.write(f"**Nom:** {exam['Nom']}")
        st.write(f"**Date:** {exam['Date']}")
        st.write(f"**Heure:** {exam['Heure']}")
        if st.button(f"Supprimer l'examen {index + 1}", key=f"delete_exam_{index}"):
            delete_exam(index)
            st.rerun()
        st.write("---")

# Fonction pour supprimer un examen
def delete_exam(index):
    exams = load_exams()
    if 0 <= index < len(exams):
        del exams[index]
        with open("exams.json", "w") as file:
            json.dump(exams, file, indent=4)
        st.success("Examen supprim√© avec succ√®s !")
    else:
        st.error("Index d'examen invalide.")

# Fonction pour ajouter une t√¢che r√©currente
def add_recurring_task():
    st.subheader("Ajouter une t√¢che r√©currente üìÖ")
    task_name = st.text_input("Nom de la t√¢che", key="add_recurring_task_name")
    frequency = st.selectbox("Fr√©quence", ["Hebdomadaire", "Mensuelle"], key="add_recurring_task_frequency")

    if st.button("Ajouter la t√¢che r√©currente", key="add_recurring_task_button"):
        if task_name and frequency:
            task_data = {
                "Nom": task_name,
                "Fr√©quence": frequency
            }
            save_recurring_task(task_data)
            st.success("T√¢che r√©currente ajout√©e avec succ√®s !")

# Fonction pour sauvegarder les t√¢ches r√©currentes dans un fichier JSON
def save_recurring_task(task_data):
    try:
        with open("recurring_tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

    tasks.append(task_data)

    with open("recurring_tasks.json", "w") as file:
        json.dump(tasks, file, indent=4)

# Fonction pour charger les t√¢ches r√©currentes depuis un fichier JSON
def load_recurring_tasks():
    try:
        with open("recurring_tasks.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour afficher les t√¢ches r√©currentes sauvegard√©es
def view_recurring_tasks():
    st.subheader("T√¢ches r√©currentes sauvegard√©es üìÖ")
    tasks = load_recurring_tasks()
    for index, task in enumerate(tasks):
        st.write(f"**Nom:** {task['Nom']}")
        st.write(f"**Fr√©quence:** {task['Fr√©quence']}")
        if st.button(f"Supprimer la t√¢che {index + 1}", key=f"delete_recurring_task_{index}"):
            delete_recurring_task(index)
            st.rerun()
        st.write("---")

# Fonction pour supprimer une t√¢che r√©currente
def delete_recurring_task(index):
    tasks = load_recurring_tasks()
    if 0 <= index < len(tasks):
        del tasks[index]
        with open("recurring_tasks.json", "w") as file:
            json.dump(tasks, file, indent=4)
        st.success("T√¢che r√©currente supprim√©e avec succ√®s !")
    else:
        st.error("Index de t√¢che invalide.")

# Fonction pour ajouter une ressource p√©dagogique
def add_educational_resource():
    st.subheader("Ajouter une ressource p√©dagogique üìö")
    resource_name = st.text_input("Nom de la ressource", key="add_resource_name")
    resource_type = st.selectbox("Type de ressource", ["Lien", "Vid√©o", "Livre", "Article"], key="add_resource_type")
    resource_link = st.text_input("Lien de la ressource", key="add_resource_link")
    resource_description = st.text_area("Description de la ressource", key="add_resource_description")

    if st.button("Ajouter la ressource", key="add_resource_button"):
        if resource_name and resource_type and resource_link and resource_description:
            resource_data = {
                "Nom": resource_name,
                "Type": resource_type,
                "Lien": resource_link,
                "Description": resource_description
            }
            save_educational_resource(resource_data)
            st.success("Ressource p√©dagogique ajout√©e avec succ√®s !")
        else:
            st.error("Veuillez remplir tous les champs.")

# Fonction pour sauvegarder les ressources p√©dagogiques dans un fichier JSON
def save_educational_resource(resource_data):
    try:
        with open("educational_resources.json", "r") as file:
            resources = json.load(file)
    except FileNotFoundError:
        resources = []

    resources.append(resource_data)

    with open("educational_resources.json", "w") as file:
        json.dump(resources, file, indent=4)

# Fonction pour charger les ressources p√©dagogiques depuis un fichier JSON
def load_educational_resources():
    try:
        with open("educational_resources.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour afficher les ressources p√©dagogiques sauvegard√©es
def view_educational_resources():
    st.subheader("Ressources p√©dagogiques sauvegard√©es üìö")
    resources = load_educational_resources()
    for index, resource in enumerate(resources):
        st.write(f"**Nom:** {resource['Nom']}")
        st.write(f"**Type:** {resource['Type']}")
        st.write(f"**Lien:** {resource['Lien']}")
        st.write(f"**Description:** {resource['Description']}")
        if st.button(f"Supprimer la ressource {index + 1}", key=f"delete_resource_{index}"):
            delete_educational_resource(index)
            st.rerun()
        st.write("---")

# Fonction pour supprimer une ressource p√©dagogique
def delete_educational_resource(index):
    resources = load_educational_resources()
    if 0 <= index < len(resources):
        del resources[index]
        with open("educational_resources.json", "w") as file:
            json.dump(resources, file, indent=4)
        st.success("Ressource p√©dagogique supprim√©e avec succ√®s !")
    else:
        st.error("Index de ressource invalide.")

# Fonction pour g√©rer les finances personnelles
def manage_personal_finances():
    st.subheader("Gestion des Finances Personnelles üí∏")

    # Ajouter une transaction
    st.subheader("Ajouter une transaction üí∏")
    transaction_type = st.selectbox("Type de transaction", ["Revenu", "D√©pense"], key="add_transaction_type")
    amount = st.number_input("Montant", min_value=0.0, step=0.01, key="add_transaction_amount")
    category = st.text_input("Cat√©gorie", key="add_transaction_category")
    date = st.date_input("Date de la transaction", key="add_transaction_date")

    if st.button("Ajouter la transaction", key="add_transaction_button"):
        if transaction_type and amount and category and date:
            transaction_data = {
                "Type": transaction_type,
                "Montant": amount,
                "Cat√©gorie": category,
                "Date": date.strftime("%Y-%m-%d")
            }
            save_transaction(transaction_data)
            st.success("Transaction ajout√©e avec succ√®s !")

    # Afficher les transactions sauvegard√©es
    st.subheader("Transactions sauvegard√©es üí∏")
    transactions = load_transactions()
    for index, transaction in enumerate(transactions):
        st.write(f"**Type:** {transaction['Type']}")
        st.write(f"**Montant:** {transaction['Montant']}")
        st.write(f"**Cat√©gorie:** {transaction['Cat√©gorie']}")
        st.write(f"**Date:** {transaction['Date']}")
        if st.button(f"Supprimer la transaction {index + 1}", key=f"delete_transaction_{index}"):
            delete_transaction(index)
            st.rerun()
        st.write("---")

    # Afficher le rapport financier
    st.subheader("Rapport Financier üìà")
    generate_financial_report(transactions)

# Fonction pour sauvegarder les transactions dans un fichier JSON
def save_transaction(transaction_data):
    try:
        with open("transactions.json", "r") as file:
            transactions = json.load(file)
    except FileNotFoundError:
        transactions = []

    transactions.append(transaction_data)

    with open("transactions.json", "w") as file:
        json.dump(transactions, file, indent=4)

# Fonction pour charger les transactions depuis un fichier JSON
def load_transactions():
    try:
        with open("transactions.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une transaction
def delete_transaction(index):
    transactions = load_transactions()
    if 0 <= index < len(transactions):
        del transactions[index]
        with open("transactions.json", "w") as file:
            json.dump(transactions, file, indent=4)
        st.success("Transaction supprim√©e avec succ√®s !")
    else:
        st.error("Index de transaction invalide.")

# Fonction pour g√©n√©rer un rapport financier
def generate_financial_report(transactions):
    if transactions:
        df = pd.DataFrame(transactions)
        df["Date"] = pd.to_datetime(df["Date"])
        df["Mois"] = df["Date"].dt.to_period("M")
        report = df.groupby(["Mois", "Type"])["Montant"].sum().unstack().fillna(0)
        report["Solde"] = report["Revenu"] - report["D√©pense"]
        st.dataframe(report, use_container_width=True)
    else:
        st.info("Aucune transaction enregistr√©e pour le moment.")

# Fonction pour suivre la sant√©
def track_health():
    st.subheader("Suivi de la Sant√© üèãÔ∏è‚Äç‚ôÇÔ∏è")

    # Ajouter une entr√©e de sant√©
    st.subheader("Ajouter une entr√©e de sant√© üèãÔ∏è‚Äç‚ôÇÔ∏è")
    activity_type = st.selectbox("Type d'activit√©", ["Exercice", "Sommeil", "Alimentation"], key="add_health_type")
    duration = st.number_input("Dur√©e (en minutes)", min_value=0, step=1, key="add_health_duration")
    notes = st.text_area("Notes", key="add_health_notes")
    date = st.date_input("Date de l'activit√©", key="add_health_date")

    if st.button("Ajouter l'entr√©e de sant√©", key="add_health_button"):
        if activity_type and duration and date:
            health_data = {
                "Type": activity_type,
                "Dur√©e": duration,
                "Notes": notes,
                "Date": date.strftime("%Y-%m-%d")
            }
            save_health_entry(health_data)
            st.success("Entr√©e de sant√© ajout√©e avec succ√®s !")

    # Afficher les entr√©es de sant√© sauvegard√©es
    st.subheader("Entr√©es de Sant√© sauvegard√©es üèãÔ∏è‚Äç‚ôÇÔ∏è")
    health_entries = load_health_entries()
    for index, entry in enumerate(health_entries):
        st.write(f"**Type:** {entry['Type']}")
        st.write(f"**Dur√©e:** {entry['Dur√©e']} minutes")
        st.write(f"**Notes:** {entry['Notes']}")
        st.write(f"**Date:** {entry['Date']}")
        if st.button(f"Supprimer l'entr√©e {index + 1}", key=f"delete_health_{index}"):
            delete_health_entry(index)
            st.rerun()
        st.write("---")

    # Afficher le rapport de sant√©
    st.subheader("Rapport de Sant√© üìà")
    generate_health_report(health_entries)

# Fonction pour sauvegarder les entr√©es de sant√© dans un fichier JSON
def save_health_entry(health_data):
    try:
        with open("health_entries.json", "r") as file:
            health_entries = json.load(file)
    except FileNotFoundError:
        health_entries = []

    health_entries.append(health_data)

    with open("health_entries.json", "w") as file:
        json.dump(health_entries, file, indent=4)

# Fonction pour charger les entr√©es de sant√© depuis un fichier JSON
def load_health_entries():
    try:
        with open("health_entries.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une entr√©e de sant√©
def delete_health_entry(index):
    health_entries = load_health_entries()
    if 0 <= index < len(health_entries):
        del health_entries[index]
        with open("health_entries.json", "w") as file:
            json.dump(health_entries, file, indent=4)
        st.success("Entr√©e de sant√© supprim√©e avec succ√®s !")
    else:
        st.error("Index d'entr√©e de sant√© invalide.")

# Fonction pour g√©n√©rer un rapport de sant√©
def generate_health_report(health_entries):
    if health_entries:
        df = pd.DataFrame(health_entries)
        df["Date"] = pd.to_datetime(df["Date"])
        df["Mois"] = df["Date"].dt.to_period("M")
        report = df.groupby(["Mois", "Type"])["Dur√©e"].sum().unstack().fillna(0)
        st.dataframe(report, use_container_width=True)
    else:
        st.info("Aucune entr√©e de sant√© enregistr√©e pour le moment.")

# Fonction pour g√©rer les contacts
def manage_contacts():
    st.subheader("Gestion des Contacts üìû")

    # Ajouter un contact
    st.subheader("Ajouter un contact üìû")
    name = st.text_input("Nom", key="add_contact_name")
    email = st.text_input("Email", key="add_contact_email")
    phone = st.text_input("T√©l√©phone", key="add_contact_phone")
    notes = st.text_area("Notes", key="add_contact_notes")

    if st.button("Ajouter le contact", key="add_contact_button"):
        if name and email and phone:
            contact_data = {
                "Nom": name,
                "Email": email,
                "T√©l√©phone": phone,
                "Notes": notes
            }
            save_contact(contact_data)
            st.success("Contact ajout√© avec succ√®s !")

    # Afficher les contacts sauvegard√©s
    st.subheader("Contacts sauvegard√©s üìû")
    contacts = load_contacts()
    for index, contact in enumerate(contacts):
        st.write(f"**Nom:** {contact['Nom']}")
        st.write(f"**Email:** {contact['Email']}")
        st.write(f"**T√©l√©phone:** {contact['T√©l√©phone']}")
        st.write(f"**Notes:** {contact['Notes']}")
        if st.button(f"Supprimer le contact {index + 1}", key=f"delete_contact_{index}"):
            delete_contact(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les contacts dans un fichier JSON
def save_contact(contact_data):
    try:
        with open("contacts.json", "r") as file:
            contacts = json.load(file)
    except FileNotFoundError:
        contacts = []

    contacts.append(contact_data)

    with open("contacts.json", "w") as file:
        json.dump(contacts, file, indent=4)

# Fonction pour charger les contacts depuis un fichier JSON
def load_contacts():
    try:
        with open("contacts.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un contact
def delete_contact(index):
    contacts = load_contacts()
    if 0 <= index < len(contacts):
        del contacts[index]
        with open("contacts.json", "w") as file:
            json.dump(contacts, file, indent=4)
        st.success("Contact supprim√© avec succ√®s !")
    else:
        st.error("Index de contact invalide.")

# Fonction pour d√©finir des objectifs √† long terme
def set_long_term_goals():
    st.subheader("D√©finir des Objectifs √† Long Terme üéØ")

    # Ajouter un objectif √† long terme
    st.subheader("Ajouter un objectif √† long terme üéØ")
    goal_name = st.text_input("Nom de l'objectif", key="add_long_term_goal_name")
    goal_description = st.text_area("Description de l'objectif", key="add_long_term_goal_description")
    goal_deadline = st.date_input("Date limite", key="add_long_term_goal_deadline")

    if st.button("Ajouter l'objectif", key="add_long_term_goal_button"):
        if goal_name and goal_description and goal_deadline:
            goal_data = {
                "Nom": goal_name,
                "Description": goal_description,
                "Date limite": goal_deadline.strftime("%Y-%m-%d")
            }
            save_long_term_goal(goal_data)
            st.success("Objectif √† long terme ajout√© avec succ√®s !")

    # Afficher les objectifs √† long terme sauvegard√©s
    st.subheader("Objectifs √† Long Terme sauvegard√©s üéØ")
    long_term_goals = load_long_term_goals()
    for index, goal in enumerate(long_term_goals):
        st.write(f"**Nom:** {goal['Nom']}")
        st.write(f"**Description:** {goal['Description']}")
        st.write(f"**Date limite:** {goal['Date limite']}")
        if st.button(f"Supprimer l'objectif {index + 1}", key=f"delete_long_term_goal_{index}"):
            delete_long_term_goal(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les objectifs √† long terme dans un fichier JSON
def save_long_term_goal(goal_data):
    try:
        with open("long_term_goals.json", "r") as file:
            long_term_goals = json.load(file)
    except FileNotFoundError:
        long_term_goals = []

    long_term_goals.append(goal_data)

    with open("long_term_goals.json", "w") as file:
        json.dump(long_term_goals, file, indent=4)

# Fonction pour charger les objectifs √† long terme depuis un fichier JSON
def load_long_term_goals():
    try:
        with open("long_term_goals.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un objectif √† long terme
def delete_long_term_goal(index):
    long_term_goals = load_long_term_goals()
    if 0 <= index < len(long_term_goals):
        del long_term_goals[index]
        with open("long_term_goals.json", "w") as file:
            json.dump(long_term_goals, file, indent=4)
        st.success("Objectif √† long terme supprim√© avec succ√®s !")
    else:
        st.error("Index d'objectif √† long terme invalide.")

# Fonction pour suivre les comp√©tences
def track_skills():
    st.subheader("Suivi des Comp√©tences üìö")

    # Ajouter une comp√©tence
    st.subheader("Ajouter une comp√©tence üìö")
    skill_name = st.text_input("Nom de la comp√©tence", key="add_skill_name")
    skill_level = st.selectbox("Niveau de comp√©tence", ["D√©butant", "Interm√©diaire", "Avanc√©"], key="add_skill_level")
    skill_description = st.text_area("Description de la comp√©tence", key="add_skill_description")

    if st.button("Ajouter la comp√©tence", key="add_skill_button"):
        if skill_name and skill_level and skill_description:
            skill_data = {
                "Nom": skill_name,
                "Niveau": skill_level,
                "Description": skill_description
            }
            save_skill(skill_data)
            st.success("Comp√©tence ajout√©e avec succ√®s !")

    # Afficher les comp√©tences sauvegard√©es
    st.subheader("Comp√©tences sauvegard√©es üìö")
    skills = load_skills()
    for index, skill in enumerate(skills):
        st.write(f"**Nom:** {skill['Nom']}")
        st.write(f"**Niveau:** {skill['Niveau']}")
        st.write(f"**Description:** {skill['Description']}")
        if st.button(f"Supprimer la comp√©tence {index + 1}", key=f"delete_skill_{index}"):
            delete_skill(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les comp√©tences dans un fichier JSON
def save_skill(skill_data):
    try:
        with open("skills.json", "r") as file:
            skills = json.load(file)
    except FileNotFoundError:
        skills = []

    skills.append(skill_data)

    with open("skills.json", "w") as file:
        json.dump(skills, file, indent=4)

# Fonction pour charger les comp√©tences depuis un fichier JSON
def load_skills():
    try:
        with open("skills.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une comp√©tence
def delete_skill(index):
    skills = load_skills()
    if 0 <= index < len(skills):
        del skills[index]
        with open("skills.json", "w") as file:
            json.dump(skills, file, indent=4)
        st.success("Comp√©tence supprim√©e avec succ√®s !")
    else:
        st.error("Index de comp√©tence invalide.")

# Fonction pour suivre les lectures
def track_reading():
    st.subheader("Suivi des Lectures üìö")

    # Ajouter une lecture
    st.subheader("Ajouter une lecture üìö")
    book_title = st.text_input("Titre du livre", key="add_reading_title")
    author = st.text_input("Auteur", key="add_reading_author")
    genre = st.text_input("Genre", key="add_reading_genre")
    start_date = st.date_input("Date de d√©but", key="add_reading_start_date")
    end_date = st.date_input("Date de fin", key="add_reading_end_date")
    rating = st.number_input("Note (sur 5)", min_value=0, max_value=5, step=1, key="add_reading_rating")
    review = st.text_area("Avis", key="add_reading_review")

    if st.button("Ajouter la lecture", key="add_reading_button"):
        if book_title and author and genre and start_date and end_date and rating:
            reading_data = {
                "Titre": book_title,
                "Auteur": author,
                "Genre": genre,
                "Date de d√©but": start_date.strftime("%Y-%m-%d"),
                "Date de fin": end_date.strftime("%Y-%m-%d"),
                "Note": rating,
                "Avis": review
            }
            save_reading(reading_data)
            st.success("Lecture ajout√©e avec succ√®s !")

    # Afficher les lectures sauvegard√©es
    st.subheader("Lectures sauvegard√©es üìö")
    readings = load_readings()
    for index, reading in enumerate(readings):
        st.write(f"**Titre:** {reading['Titre']}")
        st.write(f"**Auteur:** {reading['Auteur']}")
        st.write(f"**Genre:** {reading['Genre']}")
        st.write(f"**Date de d√©but:** {reading['Date de d√©but']}")
        st.write(f"**Date de fin:** {reading['Date de fin']}")
        st.write(f"**Note:** {reading['Note']}")
        st.write(f"**Avis:** {reading['Avis']}")
        if st.button(f"Supprimer la lecture {index + 1}", key=f"delete_reading_{index}"):
            delete_reading(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les lectures dans un fichier JSON
def save_reading(reading_data):
    try:
        with open("readings.json", "r") as file:
            readings = json.load(file)
    except FileNotFoundError:
        readings = []

    readings.append(reading_data)

    with open("readings.json", "w") as file:
        json.dump(readings, file, indent=4)

# Fonction pour charger les lectures depuis un fichier JSON
def load_readings():
    try:
        with open("readings.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une lecture
def delete_reading(index):
    readings = load_readings()
    if 0 <= index < len(readings):
        del readings[index]
        with open("readings.json", "w") as file:
            json.dump(readings, file, indent=4)
        st.success("Lecture supprim√©e avec succ√®s !")
    else:
        st.error("Index de lecture invalide.")

# Fonction pour int√©grer des applications de m√©ditation
def integrate_meditation_apps():
    st.subheader("Int√©gration avec les Applications de M√©ditation üßò")

    # Ajouter une session de m√©ditation
    st.subheader("Ajouter une session de m√©ditation üßò")
    meditation_type = st.selectbox("Type de m√©ditation", ["Mindfulness", "Respiration", "Corps Scan"], key="add_meditation_type")
    duration = st.number_input("Dur√©e (en minutes)", min_value=0, step=1, key="add_meditation_duration")
    notes = st.text_area("Notes", key="add_meditation_notes")
    date = st.date_input("Date de la session", key="add_meditation_date")

    if st.button("Ajouter la session", key="add_meditation_button"):
        if meditation_type and duration and date:
            meditation_data = {
                "Type": meditation_type,
                "Dur√©e": duration,
                "Notes": notes,
                "Date": date.strftime("%Y-%m-%d")
            }
            save_meditation_session(meditation_data)
            st.success("Session de m√©ditation ajout√©e avec succ√®s !")

    # Afficher les sessions de m√©ditation sauvegard√©es
    st.subheader("Sessions de M√©ditation sauvegard√©es üßò")
    meditation_sessions = load_meditation_sessions()
    for index, session in enumerate(meditation_sessions):
        st.write(f"**Type:** {session['Type']}")
        st.write(f"**Dur√©e:** {session['Dur√©e']} minutes")
        st.write(f"**Notes:** {session['Notes']}")
        st.write(f"**Date:** {session['Date']}")
        if st.button(f"Supprimer la session {index + 1}", key=f"delete_meditation_{index}"):
            delete_meditation_session(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les sessions de m√©ditation dans un fichier JSON
def save_meditation_session(meditation_data):
    try:
        with open("meditation_sessions.json", "r") as file:
            meditation_sessions = json.load(file)
    except FileNotFoundError:
        meditation_sessions = []

    meditation_sessions.append(meditation_data)

    with open("meditation_sessions.json", "w") as file:
        json.dump(meditation_sessions, file, indent=4)

# Fonction pour charger les sessions de m√©ditation depuis un fichier JSON
def load_meditation_sessions():
    try:
        with open("meditation_sessions.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer une session de m√©ditation
def delete_meditation_session(index):
    meditation_sessions = load_meditation_sessions()
    if 0 <= index < len(meditation_sessions):
        del meditation_sessions[index]
        with open("meditation_sessions.json", "w") as file:
            json.dump(meditation_sessions, file, indent=4)
        st.success("Session de m√©ditation supprim√©e avec succ√®s !")
    else:
        st.error("Index de session de m√©ditation invalide.")

# Fonction pour suivre les progr√®s en langues
def track_language_progress():
    st.subheader("Suivi des Progr√®s en Langues üåê")

    # Ajouter un progr√®s en langue
    st.subheader("Ajouter un progr√®s en langue üåê")
    language = st.text_input("Langue", key="add_language_progress_language")
    level = st.selectbox("Niveau", ["D√©butant", "Interm√©diaire", "Avanc√©"], key="add_language_progress_level")
    progress_notes = st.text_area("Notes de progr√®s", key="add_language_progress_notes")
    date = st.date_input("Date du progr√®s", key="add_language_progress_date")

    if st.button("Ajouter le progr√®s", key="add_language_progress_button"):
        if language and level and date:
            progress_data = {
                "Langue": language,
                "Niveau": level,
                "Notes": progress_notes,
                "Date": date.strftime("%Y-%m-%d")
            }
            save_language_progress(progress_data)
            st.success("Progr√®s en langue ajout√© avec succ√®s !")

    # Afficher les progr√®s en langues sauvegard√©s
    st.subheader("Progr√®s en Langues sauvegard√©s üåê")
    language_progress = load_language_progress()
    for index, progress in enumerate(language_progress):
        st.write(f"**Langue:** {progress['Langue']}")
        st.write(f"**Niveau:** {progress['Niveau']}")
        st.write(f"**Notes:** {progress['Notes']}")
        st.write(f"**Date:** {progress['Date']}")
        if st.button(f"Supprimer le progr√®s {index + 1}", key=f"delete_language_progress_{index}"):
            delete_language_progress(index)
            st.rerun()
        st.write("---")

# Fonction pour sauvegarder les progr√®s en langues dans un fichier JSON
def save_language_progress(progress_data):
    try:
        with open("language_progress.json", "r") as file:
            language_progress = json.load(file)
    except FileNotFoundError:
        language_progress = []

    language_progress.append(progress_data)

    with open("language_progress.json", "w") as file:
        json.dump(language_progress, file, indent=4)

# Fonction pour charger les progr√®s en langues depuis un fichier JSON
def load_language_progress():
    try:
        with open("language_progress.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Fonction pour supprimer un progr√®s en langue
def delete_language_progress(index):
    language_progress = load_language_progress()
    if 0 <= index < len(language_progress):
        del language_progress[index]
        with open("language_progress.json", "w") as file:
            json.dump(language_progress, file, indent=4)
        st.success("Progr√®s en langue supprim√© avec succ√®s !")
    else:
        st.error("Index de progr√®s en langue invalide.")

# Interface utilisateur
st.title("üå∏üìö Gestionnaire d‚ÄôEmploi du Temps et d‚ÄôActivit√©s ‚è∞üå∏")

# Charger les pr√©f√©rences utilisateur
preferences = load_preferences()
change_theme(preferences["theme"])
#logo
st.logo("Sans titre.jpg")

# Afficher le cercle d√©coratif avec des emojis
st.markdown(
    """
    <div class="circle">
        <span class="emoji emoji-1">‚ú®</span>
        <span class="emoji emoji-2">üåü</span>
        <span class="emoji emoji-3">üí´</span>
        <span class="emoji emoji-4">üå†</span>
    </div>
    """,
    unsafe_allow_html=True
)

# Menu de navigation avec des boutons verticaux
selected_choice = st.sidebar.radio("Menu", [
    "üè† Accueil",
    "üìÖ Gestion du Temps",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è Suivi Personnel",
    "üõ†Ô∏è Outils Acad√©miques",
    "üõ†Ô∏è Outils de Productivit√©",
    "üõ†Ô∏è Outils Personnels"
], index=0)

if selected_choice == "üè† Accueil":
    st.markdown("""
    <div class='home-section'>
        <h2 class='blue-title'>üìö Gestionnaire d‚ÄôEmploi du Temps et d‚ÄôActivit√©s ‚è∞üå∏</h2>
        <p class='brown-text'>üå∏ Bienvenue dans votre outil de gestion d‚Äôemploi du temps ! üå∏</p>
        <p class='brown-text'>
            Organisez facilement vos cours, t√¢ches, projets et examens. Suivez vos activit√©s et optimisez votre productivit√© en un clic !
        </p>
        <a href="#" class="cta-button">
            üöÄ <span class="cta-icon">‚û°Ô∏è</span> Commencer
        </a>
    </div>
    """, unsafe_allow_html=True)

elif selected_choice == "üìÖ Gestion du Temps":
    st.subheader("üìÖ Gestion du Temps üå∏")
    st.write("Ajoutez, modifiez et supprimez vos activit√©s quotidiennes ici.")

    # Connexion √† la base de donn√©es
    conn = sqlite3.connect("emploi_du_temps.db")
    cursor = conn.cursor()

    # Cr√©ation de la table si elle n'existe pas
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS activites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nom TEXT NOT NULL,
            date TEXT NOT NULL,
            duree INTEGER NOT NULL
        )
    """)
    conn.commit()

    # Ajouter une nouvelle activit√©
    st.subheader("Ajouter une nouvelle activit√© üìÖ")
    with st.form(key="add_activity_form"):
        date = st.date_input("Date", key="add_activity_date")
        matiere = st.selectbox("Mati√®re", emploi_du_temps["Mati√®re"].unique(), key="add_activity_matiere")
        duree = st.number_input("Dur√©e (en heures)", min_value=0.0, step=0.1, key="add_activity_duree")
        priorite = st.selectbox("Priorit√©", ["Faible", "Moyenne", "√âlev√©e"], key="add_activity_priorite")
        submitted = st.form_submit_button("Ajouter l'activit√©")

        if submitted:
            if date and matiere and duree and priorite:
                # Convertir la dur√©e en minutes
                duree_minutes = convert_hours_to_minutes(duree)
                new_activity = pd.DataFrame({
                    "Date": [date],
                    "Mati√®re": [matiere],
                    "Dur√©e": [duree_minutes],  # Utiliser la dur√©e en minutes
                    "Priorit√©": [priorite]
                })
                emploi_du_temps = pd.concat([emploi_du_temps, new_activity], ignore_index=True)
                save_to_csv(emploi_du_temps)
                st.success("Activit√© ajout√©e avec succ√®s !")

                # Enregistrer dans la base de donn√©es
                cursor.execute("""
                    INSERT INTO activites (nom, date, duree) VALUES (?, ?, ?)
                """, (matiere, date.strftime("%Y-%m-%d"), duree_minutes))
                conn.commit()
            else:
                st.error("Veuillez remplir tous les champs.")

    # Chargement des activit√©s depuis la base
    st.subheader("Activit√©s existantes üìÖ")
    df = pd.read_sql_query("SELECT * FROM activites", conn)

    if not df.empty:
        df["date"] = pd.to_datetime(df["date"], errors="coerce")
        df = df.dropna(subset=["date"])
        df["date"] = df["date"].dt.strftime("%Y-%m-%d")  # Formatage des dates
        st.dataframe(df, use_container_width=True)
    else:
        st.info("Aucune activit√© enregistr√©e pour le moment.")

    conn.close()

    # Ajouter un bouton pour supprimer les activit√©s d'une journ√©e sp√©cifique
    st.subheader("Supprimer les activit√©s d'une journ√©e sp√©cifique")
    delete_date = st.date_input("S√©lectionnez la date pour supprimer les activit√©s", value=datetime.now().date())
    if st.button("Supprimer les activit√©s"):
        delete_activities_by_date(delete_date)

    # Ajouter le diagramme circulaire
    st.subheader("Diagramme circulaire de l'emploi du temps")
    selected_date = st.date_input("S√©lectionnez la date pour le diagramme circulaire", value=datetime.now().date())
    generate_pie_chart(selected_date)

elif selected_choice == "üèãÔ∏è‚Äç‚ôÇÔ∏è Suivi Personnel":
    st.subheader("üèãÔ∏è‚Äç‚ôÇÔ∏è Suivi Personnel üå∏")
    st.write("Suivez vos progr√®s personnels et am√©liorez vos comp√©tences.")

    # Sous-menu pour le suivi personnel
    personal_choice = st.sidebar.radio("Suivi Personnel", [
        "üéØ Objectifs",
        "üìö Suivi des Comp√©tences",
        "üìö Suivi des Lectures",
        "üåê Suivi des Progr√®s en Langues",
        "üèãÔ∏è‚Äç‚ôÇÔ∏è Suivi de la Sant√©",
        "üìû Gestion des Contacts",
        "üéØ Objectifs √† Long Terme"
    ], index=0)

    if personal_choice == "üéØ Objectifs":
        set_goals()
        view_goals()

    elif personal_choice == "üìö Suivi des Comp√©tences":
        track_skills()

    elif personal_choice == "üìö Suivi des Lectures":
        track_reading()

    elif personal_choice == "üåê Suivi des Progr√®s en Langues":
        track_language_progress()

    elif personal_choice == "üèãÔ∏è‚Äç‚ôÇÔ∏è Suivi de la Sant√©":
        track_health()

    elif personal_choice == "üìû Gestion des Contacts":
        manage_contacts()

    elif personal_choice == "üéØ Objectifs √† Long Terme":
        set_long_term_goals()

elif selected_choice == "üõ†Ô∏è Outils Acad√©miques":
    st.subheader("üõ†Ô∏è Outils Acad√©miques üå∏")

    # Sous-menu pour les outils acad√©miques
    academic_tools_choice = st.sidebar.radio("Outils Acad√©miques", [
        "üìö Cours",
        "üìã T√¢ches",
        "üìà Notes et Coefficients",
        "üìö Examens",
        "üìÖ T√¢ches R√©currentes",
        "üìö Ressources P√©dagogiques"
    ], index=0)

    if academic_tools_choice == "üìö Cours":
        add_course()
        view_courses()

    elif academic_tools_choice == "üìã T√¢ches":
        add_task()
        view_tasks()

    elif academic_tools_choice == "üìà Notes et Coefficients":
        manage_grades_and_coefficients()

    elif academic_tools_choice == "üìö Examens":
        add_exam()
        view_exams()

    elif academic_tools_choice == "üìÖ T√¢ches R√©currentes":
        add_recurring_task()
        view_recurring_tasks()

    elif academic_tools_choice == "üìö Ressources P√©dagogiques":
        add_educational_resource()
        view_educational_resources()

elif selected_choice == "üõ†Ô∏è Outils de Productivit√©":
    st.subheader("üõ†Ô∏è Outils de Productivit√© üå∏")

    # Sous-menu pour les outils de productivit√©
    productivity_tools_choice = st.sidebar.radio("Outils de Productivit√©", [
        "üìà Rapports",
        "üìù √âvaluation",
        "üå∏ Pr√©f√©rences",
        "üìà Temps Pass√©",
        "üïí Minuteur Pomodoro"
    ], index=0)

    if productivity_tools_choice == "üìà Rapports":
        st.subheader("üìà Rapports üå∏")
        period = st.selectbox("P√©riode", ["Hebdomadaire", "Mensuelle"], key="report_period")
        if st.button("G√©n√©rer le rapport", key="generate_report_button"):
            report = generate_report(emploi_du_temps, period.lower())
            if not report.empty:
                st.dataframe(report, use_container_width=True)
            else:
                st.info("Aucune donn√©e disponible pour cette p√©riode.")

        st.subheader("Rapport de progression üìà")
        progress_report = generate_progress_report(emploi_du_temps, load_goals())
        if not progress_report.empty:
            st.dataframe(progress_report, use_container_width=True)
        else:
            st.info("Aucune donn√©e disponible pour le rapport de progression.")

    elif productivity_tools_choice == "üìù √âvaluation":
        evaluate_time_management()

    elif productivity_tools_choice == "üå∏ Pr√©f√©rences":
        st.subheader("üå∏ Pr√©f√©rences üå∏")
        theme = st.selectbox("Th√®me", ["Clair", "Sombre"], key="preferences_theme")
        if st.button("Enregistrer les pr√©f√©rences", key="save_preferences_button"):
            save_preferences(theme)
            change_theme(theme)
            st.success("Pr√©f√©rences enregistr√©es avec succ√®s !")

    elif productivity_tools_choice == "üìà Temps Pass√©":
        st.subheader("üìà Temps Pass√© sur les Activit√©s üå∏")
        activity = st.text_input("Nom de l'activit√©")
        start_time = st.time_input("Heure de d√©but")
        end_time = st.time_input("Heure de fin")
        if st.button("Enregistrer le temps pass√©"):
            log_time_spent(activity, start_time.strftime("%H:%M:%S"), end_time.strftime("%H:%M:%S"))
        view_time_log()

    elif productivity_tools_choice == "üïí Minuteur Pomodoro":
        st.subheader("üïí Minuteur Pomodoro üå∏")
        work_duration = st.number_input("Dur√©e de travail (en minutes)", min_value=1, step=1, key="pomodoro_work_duration")
        break_duration = st.number_input("Dur√©e de pause (en minutes)", min_value=1, step=1, key="pomodoro_break_duration")
        if st.button("D√©marrer le minuteur Pomodoro", key="start_pomodoro_timer_button"):
            start_pomodoro_timer(work_duration, break_duration)

        if st.button("Mettre en pause le minuteur Pomodoro", key="pause_pomodoro_timer_button"):
            pause_pomodoro_timer()

        if st.button("Arr√™ter le son", key="stop_sound_button"):
            stop_sound()

elif selected_choice == "üõ†Ô∏è Outils Personnels":
    st.subheader("üõ†Ô∏è Outils Personnels üå∏")

    # Sous-menu pour les outils personnels
    personal_tools_choice = st.sidebar.radio("Outils Personnels", [
        "üí∏ Gestion des Finances Personnelles",
        "üì∏ Int√©gration avec les R√©seaux Sociaux",
        "üßò Applications de M√©ditation"
    ], index=0)

    if personal_tools_choice == "üí∏ Gestion des Finances Personnelles":
        manage_personal_finances()

    elif personal_tools_choice == "üì∏ Int√©gration avec les R√©seaux Sociaux":
        integrate_with_social_media()

    elif personal_tools_choice == "üßò Applications de M√©ditation":
        integrate_meditation_apps()
